From 0a267517252b0df902cb20be44f52e34e556d884 Mon Sep 17 00:00:00 2001
From: Sudip Jain <sudip.jain@intel.com>
Date: Fri, 10 Feb 2017 12:56:56 +0530
Subject: [PATCH] openvx:  fixes for Khronos openvx1.1 sample implementation

Some fixes are required for sample implementation of openvx1.1
(https://www.khronos.org/registry/OpenVX/)
This include feature enabling, removal of deprecated code, missing functions
and errors

For enabling tiling and target feature:

cmake ../ -DOPENVX_USE_TILING=ON
cmake ../ -DEXPERIMENTAL_USE_TARGET=ON -DEXPERIMENTAL_USE_OPENCL=ON

Signed-off-by: Sudip Jain <sudip.jain@intel.com>
---
 Android.mk                            |   2 +-
 CMakeLists.txt                        | 351 +++++++++++++++++-----------------
 cmake_utils/CMake_linux_tools.cmake   | 258 +++++++++++++------------
 examples/vx_tiling_ext.c              |  25 +++
 examples/vx_tiling_main.c             |   4 +-
 include/VX/vx_api.h                   |  18 +-
 include/VX/vx_khr_opencl.h            |   6 +-
 include/VX/vx_khr_tiling.h            |  29 +--
 include/VX/vx_types.h                 |   4 +-
 sample/framework/vx_context.c         |   3 +
 sample/framework/vx_kernel.c          |  10 +-
 sample/framework/vx_node.c            |   8 +-
 sample/targets/c_model/vx_interface.c |  12 +-
 sample/targets/opencl/vx_interface.c  |  13 +-
 14 files changed, 394 insertions(+), 349 deletions(-)

diff --git a/Android.mk b/Android.mk
index 783fbf1..799d7a6 100644
--- a/Android.mk
+++ b/Android.mk
@@ -1,4 +1,4 @@
-# 
+#
 # Copyright (c) 2012-2016 The Khronos Group Inc.
 #
 # Permission is hereby granted, free of charge, to any person obtaining a
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 17e6fac..6a43032 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,176 +1,175 @@
-#
-# Copyright (c) 2011-2016 The Khronos Group Inc.
-#
-# Permission is hereby granted, free of charge, to any person obtaining a
-# copy of this software and/or associated documentation files (the
-# "Materials"), to deal in the Materials without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Materials, and to
-# permit persons to whom the Materials are furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be included
-# in all copies or substantial portions of the Materials.
-#
-# MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
-# KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS
-# SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT
-#    https://www.khronos.org/registry/
-#
-# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
-#
-
-
-#
-# Global setup file for OpenVX CMake
-#
-cmake_minimum_required(VERSION 2.8.9)
-
-file(READ "${CMAKE_SOURCE_DIR}/VERSION" OPENVX_VERSION)
-string(STRIP "${OPENVX_VERSION}" OPENVX_VERSION)
-set(OPENVX_VERSION ${OPENVX_VERSION} CACHE INTERNAL "" FORCE)
-
-message(STATUS "===== OpenVX version: ${OPENVX_VERSION} =====")
-
-# CMAKE variables
-set( CMAKE_MODULE_PATH
-     ${CMAKE_MODULE_PATH}
-     "${CMAKE_SOURCE_DIR}/cmake_utils/"
-)
-
-include( cmake_utils/CMakeFuncs.txt )
-
-if (WIN32)
-    include( CMake_windows_tools )
-elseif (ANDROID)
-    include( CMake_android_tools )
-else ()
-    include( CMake_linux_tools )
-endif ()
-
-project (OpenVX)
-
-# Supported configurations
-set(CMAKE_CONFIGURATION_TYPES
-    "Debug"
-    "Release"
-  )
-set(CMAKE_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES} CACHE STRING "Available build configurations." FORCE)
-
-option( OPENVX_USE_TILING OFF )
-option( EXPERIMENTAL_USE_NODE_MEMORY OFF )
-option( EXPERIMENTAL_USE_OPENMP OFF )
-option( EXPERIMENTAL_USE_OPENCL OFF )
-option( EXPERIMENTAL_USE_DOT OFF )
-option( EXPERIMENTAL_USE_XML OFF )
-option( EXPERIMENTAL_USE_TARGET OFF )
-option( EXPERIMENTAL_USE_VARIANTS OFF )
-option( EXPERIMENTAL_USE_S16 OFF )
-option( EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT OFF )
-
-if (UNIX OR ANDROID)
-    add_definitions( -D_XOPEN_SOURCE=700 -D_BSD_SOURCE=1 -D_GNU_SOURCE=1 )
-    if (NOT (CYGWIN OR ANDROID))
-        set( EXPERIMENTAL_USE_OPENMP ON )
-    endif (NOT (CYGWIN OR ANDROID))
-    set( EXPERIMENTAL_USE_DOT ON )
-endif (UNIX OR ANDROID)
-
-add_definitions( -DOPENVX_BUILDING ) 
-if (OPENVX_USE_SMP)
-    add_definitions( -DOPENVX_USE_SMP )
-endif (OPENVX_USE_SMP)
-if (OPENVX_USE_TILING)
-    add_definitions( -DOPENVX_USE_TILING )
-endif (OPENVX_USE_TILING)
-if (EXPERIMENTAL_USE_NODE_MEMORY)
-    add_definitions( -DEXPERIMENTAL_USE_NODE_MEMORY )
-endif (EXPERIMENTAL_USE_NODE_MEMORY)
-if (EXPERIMENTAL_USE_OPENMP)
-    add_definitions( -DEXPERIMENTAL_USE_OPENMP )
-endif (EXPERIMENTAL_USE_OPENMP)
-if (EXPERIMENTAL_USE_OPENCL)
-    add_definitions( -DEXPERIMENTAL_USE_OPENCL )
-endif (EXPERIMENTAL_USE_OPENCL)
-if (EXPERIMENTAL_USE_DOT)
-    add_definitions( -DEXPERIMENTAL_USE_DOT )
-endif (EXPERIMENTAL_USE_DOT)
-if (EXPERIMENTAL_USE_XML)
-    add_definitions( -DEXPERIMENTAL_USE_XML )
-endif (EXPERIMENTAL_USE_XML)
-if (EXPERIMENTAL_USE_TARGET)
-    add_definitions( -DEXPERIMENTAL_USE_TARGET )
-endif (EXPERIMENTAL_USE_TARGET)
-if (EXPERIMENTAL_USE_VARIANTS)
-    add_definitions( -DEXPERIMENTAL_USE_VARIANTS )
-endif (EXPERIMENTAL_USE_VARIANTS)
-if (EXPERIMENTAL_USE_S16)
-    add_definitions( -DEXPERIMENTAL_USE_S16 )
-endif (EXPERIMENTAL_USE_S16)
-if (EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT)
-    add_definitions( -DEXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT )
-endif (EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT)
-
-if (BUILD_X64)
-    add_definitions( -DARCH_64 )
-else (BUILD_X64)
-    add_definitions( -DARCH_32 )
-endif (BUILD_X64)
-
-if (CMAKE_BUILD_TYPE EQUAL Debug)
-    add_definitions( -DOPENVX_DEBUGGING )
-endif (CMAKE_BUILD_TYPE EQUAL Debug)
-
-if ( EXPERIMENTAL_USE_OPENCL )
-    if (DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
-        set( OPENCL_INCLUDE_PATH $ENV{VX_OPENCL_INCLUDE_PATH} )
-        message( "Use OpenCL headers from: " ${OPENCL_INCLUDE_PATH} )
-	else(DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
-	    set( OPENCL_INCLUDE_PATH )
-	    message( "Use OpenCL headers from system default location, in order to set specific path: please set 'VX_OPENCL_INCLUDE_PATH' env. variable and reconfigure")
-	endif (DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
-	if (DEFINED ENV{VX_OPENCL_LIB_PATH})
-        set( OPENCL_LIB_PATH $ENV{VX_OPENCL_LIB_PATH} )
-	    message( "Use OpenCL headers from: " ${OPENCL_LIB_PATH} )
-	else(DEFINED ENV{VX_OPENCL_LIB_PATH})
-	    message( "Use OpenCL libs from system default location, in order to set specific path: please set 'VX_OPENCL_LIB_PATH' env. variable and reconfigure")
-    endif (DEFINED ENV{VX_OPENCL_LIB_PATH})
-endif ( EXPERIMENTAL_USE_OPENCL )
-
-FIND_NUM_PROCESSORS()
-if ( ${PROCESSOR_COUNT} LESS "1" )
-	message(FATAL_ERROR "Num processors found is " ${PROCESSOR_COUNT})
-endif ( ${PROCESSOR_COUNT} LESS "1" )
-add_definitions( -DTARGET_NUM_CORES=${PROCESSOR_COUNT} )
-
-# Framework IDE Folders Names
-set_property( GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "" )
-set_property( GLOBAL PROPERTY USE_FOLDERS ON )
-set( DEBUG_FOLDER Debug )
-set( EXAMPLES_FOLDER Examples )
-set( HELPER_FOLDER Helper )
-set( KERNELS_FOLDER Kernels )
-set( LIBRARIES_FOLDER Libraries )
-set( LIBRARIES_DEBUG_FOLDER ${LIBRARIES_FOLDER}/Debug )
-set( LIBRARIES_EXTRAS_FOLDER ${LIBRARIES_FOLDER}/Extras )
-set( SAMPLE_FOLDER Sample )
-set( SAMPLE_TARGETS_FOLDER ${SAMPLE_FOLDER}/Targets )
-set( SAMPLE_CPP_FOLDER SampleCPP )
-set( TOOLS_FOLDER Tools )
-
-
-add_subdirectory( debug )
-add_subdirectory( examples )
-add_subdirectory( helper )
-add_subdirectory( kernels )
-add_subdirectory( libraries )
-add_subdirectory( sample )
-add_subdirectory( sample-c++ )
-add_subdirectory( tools )
-add_subdirectory( include )
+#
+# Copyright (c) 2011-2016 The Khronos Group Inc.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and/or associated documentation files (the
+# "Materials"), to deal in the Materials without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Materials, and to
+# permit persons to whom the Materials are furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Materials.
+#
+# MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
+# KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS
+# SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT
+#    https://www.khronos.org/registry/
+#
+# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
+#
+
+
+#
+# Global setup file for OpenVX CMake
+#
+cmake_minimum_required(VERSION 2.8.9)
+
+file(READ "${CMAKE_SOURCE_DIR}/VERSION" OPENVX_VERSION)
+string(STRIP "${OPENVX_VERSION}" OPENVX_VERSION)
+set(OPENVX_VERSION ${OPENVX_VERSION} CACHE INTERNAL "" FORCE)
+
+message(STATUS "===== OpenVX version: ${OPENVX_VERSION} =====")
+
+# CMAKE variables
+set( CMAKE_MODULE_PATH
+     ${CMAKE_MODULE_PATH}
+     "${CMAKE_SOURCE_DIR}/cmake_utils/"
+)
+
+include( cmake_utils/CMakeFuncs.txt )
+
+if (WIN32)
+    include( CMake_windows_tools )
+elseif (ANDROID)
+    include( CMake_android_tools )
+else ()
+    include( CMake_linux_tools )
+endif ()
+
+project (OpenVX)
+
+# Supported configurations
+set(CMAKE_CONFIGURATION_TYPES
+    "Debug"
+    "Release"
+  )
+set(CMAKE_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES} CACHE STRING "Available build configurations." FORCE)
+
+option( OPENVX_USE_TILING OFF )
+option( EXPERIMENTAL_USE_NODE_MEMORY OFF )
+option( EXPERIMENTAL_USE_OPENMP OFF )
+option( EXPERIMENTAL_USE_OPENCL OFF )
+option( EXPERIMENTAL_USE_DOT OFF )
+option( EXPERIMENTAL_USE_XML OFF )
+option( EXPERIMENTAL_USE_TARGET OFF )
+option( EXPERIMENTAL_USE_VARIANTS OFF )
+option( EXPERIMENTAL_USE_S16 OFF )
+option( EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT OFF )
+
+if (UNIX OR ANDROID)
+    add_definitions( -D_XOPEN_SOURCE=700 -D_BSD_SOURCE=1 -D_GNU_SOURCE=1 )
+    if (NOT (CYGWIN OR ANDROID))
+        set( EXPERIMENTAL_USE_OPENMP ON )
+    endif (NOT (CYGWIN OR ANDROID))
+    set( EXPERIMENTAL_USE_DOT ON )
+endif (UNIX OR ANDROID)
+
+add_definitions( -DOPENVX_BUILDING )
+if (OPENVX_USE_SMP)
+    add_definitions( -DOPENVX_USE_SMP )
+endif (OPENVX_USE_SMP)
+if (OPENVX_USE_TILING)
+    add_definitions( -DOPENVX_USE_TILING )
+endif (OPENVX_USE_TILING)
+if (EXPERIMENTAL_USE_NODE_MEMORY)
+    add_definitions( -DEXPERIMENTAL_USE_NODE_MEMORY )
+endif (EXPERIMENTAL_USE_NODE_MEMORY)
+if (EXPERIMENTAL_USE_OPENMP)
+    add_definitions( -DEXPERIMENTAL_USE_OPENMP )
+endif (EXPERIMENTAL_USE_OPENMP)
+if (EXPERIMENTAL_USE_OPENCL)
+    add_definitions( -DEXPERIMENTAL_USE_OPENCL )
+endif (EXPERIMENTAL_USE_OPENCL)
+if (EXPERIMENTAL_USE_DOT)
+    add_definitions( -DEXPERIMENTAL_USE_DOT )
+endif (EXPERIMENTAL_USE_DOT)
+if (EXPERIMENTAL_USE_XML)
+    add_definitions( -DEXPERIMENTAL_USE_XML )
+endif (EXPERIMENTAL_USE_XML)
+if (EXPERIMENTAL_USE_TARGET)
+    add_definitions( -DEXPERIMENTAL_USE_TARGET )
+endif (EXPERIMENTAL_USE_TARGET)
+if (EXPERIMENTAL_USE_VARIANTS)
+    add_definitions( -DEXPERIMENTAL_USE_VARIANTS )
+endif (EXPERIMENTAL_USE_VARIANTS)
+if (EXPERIMENTAL_USE_S16)
+    add_definitions( -DEXPERIMENTAL_USE_S16 )
+endif (EXPERIMENTAL_USE_S16)
+if (EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT)
+    add_definitions( -DEXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT )
+endif (EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT)
+
+if (BUILD_X64)
+    add_definitions( -DARCH_64 )
+else (BUILD_X64)
+    add_definitions( -DARCH_32 )
+endif (BUILD_X64)
+
+if (CMAKE_BUILD_TYPE EQUAL Debug)
+    add_definitions( -DOPENVX_DEBUGGING )
+endif (CMAKE_BUILD_TYPE EQUAL Debug)
+
+if ( EXPERIMENTAL_USE_OPENCL )
+    if (DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
+        set( OPENCL_INCLUDE_PATH $ENV{VX_OPENCL_INCLUDE_PATH} )
+        message( "Use OpenCL headers from: " ${OPENCL_INCLUDE_PATH} )
+	else(DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
+	    set( OPENCL_INCLUDE_PATH )
+	    message( "Use OpenCL headers from system default location, in order to set specific path: please set 'VX_OPENCL_INCLUDE_PATH' env. variable and reconfigure")
+	endif (DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
+	if (DEFINED ENV{VX_OPENCL_LIB_PATH})
+        set( OPENCL_LIB_PATH $ENV{VX_OPENCL_LIB_PATH} )
+	    message( "Use OpenCL libs from: " ${OPENCL_LIB_PATH} )
+	else(DEFINED ENV{VX_OPENCL_LIB_PATH})
+	    message( "Use OpenCL libs from system default location, in order to set specific path: please set 'VX_OPENCL_LIB_PATH' env. variable and reconfigure")
+    endif (DEFINED ENV{VX_OPENCL_LIB_PATH})
+endif ( EXPERIMENTAL_USE_OPENCL )
+
+FIND_NUM_PROCESSORS()
+if ( ${PROCESSOR_COUNT} LESS "1" )
+	message(FATAL_ERROR "Num processors found is " ${PROCESSOR_COUNT})
+endif ( ${PROCESSOR_COUNT} LESS "1" )
+add_definitions( -DTARGET_NUM_CORES=${PROCESSOR_COUNT} )
+
+# Framework IDE Folders Names
+set_property( GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "" )
+set_property( GLOBAL PROPERTY USE_FOLDERS ON )
+set( DEBUG_FOLDER Debug )
+set( EXAMPLES_FOLDER Examples )
+set( HELPER_FOLDER Helper )
+set( KERNELS_FOLDER Kernels )
+set( LIBRARIES_FOLDER Libraries )
+set( LIBRARIES_DEBUG_FOLDER ${LIBRARIES_FOLDER}/Debug )
+set( LIBRARIES_EXTRAS_FOLDER ${LIBRARIES_FOLDER}/Extras )
+set( SAMPLE_FOLDER Sample )
+set( SAMPLE_TARGETS_FOLDER ${SAMPLE_FOLDER}/Targets )
+set( SAMPLE_CPP_FOLDER SampleCPP )
+set( TOOLS_FOLDER Tools )
+
+
+add_subdirectory( debug )
+add_subdirectory( examples )
+add_subdirectory( helper )
+add_subdirectory( kernels )
+add_subdirectory( libraries )
+add_subdirectory( sample )
+add_subdirectory( tools )
+add_subdirectory( include )
diff --git a/cmake_utils/CMake_linux_tools.cmake b/cmake_utils/CMake_linux_tools.cmake
index 6da6de9..d7e3859 100644
--- a/cmake_utils/CMake_linux_tools.cmake
+++ b/cmake_utils/CMake_linux_tools.cmake
@@ -1,124 +1,134 @@
-#
-# Copyright (c) 2011-2016 The Khronos Group Inc.
-#
-# Permission is hereby granted, free of charge, to any person obtaining a
-# copy of this software and/or associated documentation files (the
-# "Materials"), to deal in the Materials without restriction, including
-# without limitation the rights to use, copy, modify, merge, publish,
-# distribute, sublicense, and/or sell copies of the Materials, and to
-# permit persons to whom the Materials are furnished to do so, subject to
-# the following conditions:
-#
-# The above copyright notice and this permission notice shall be included
-# in all copies or substantial portions of the Materials.
-#
-# MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
-# KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS
-# SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT
-#    https://www.khronos.org/registry/
-#
-# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
-#
-
-
-# Options common to all projects.
-message(STATUS "** ** ** Enable Languages ** ** **")
-
-enable_language( C )
-enable_language( CXX )
-
-if (CYGWIN)
-    add_definitions( -DCYGWIN )
-    set( OPENVX_BUILDING_EXPORT_DEF -DVX_API_ENTRY=__attribute__\(\(dllexport\)\) )
-endif (CYGWIN)
-
-if(BUILD_X64)
-  set(ARCH_BIT -m64 )
-else()
-  if (TARGET_CPU STREQUAL "Atom")
-    # architecture will be according to ATOM
-    set(ARCH_BIT -m32 )
-  else ()
-    # need to force a more modern architecture than the degault m32 (i386).
-    set(ARCH_BIT "-m32 -march=core2" )
-  endif (TARGET_CPU STREQUAL "Atom")
-endif()
-
-# Compiler switches that CANNOT be modified during makefile generation
-if (NOT CYGWIN)
-    set (ADD_COMMON_C_FLAGS         "${ARCH_BIT} -fPIC" )
-endif (NOT CYGWIN)
-
-set (ADD_C_FLAGS                "${ADD_COMMON_C_FLAGS} -std=gnu99" )
-set (ADD_C_FLAGS_DEBUG          "-O0 -ggdb3 -D _DEBUG" )
-set (ADD_C_FLAGS_RELEASE        "-O2 -ggdb2 -U _DEBUG")
-set (ADD_C_FLAGS_RELWITHDEBINFO "-O2 -ggdb3 -U _DEBUG")
-
-set (ADD_CXX_FLAGS              "${ADD_COMMON_C_FLAGS}" )
-
-# Linker switches
-
-if (NOT CYGWIN)
-    set (INIT_LINKER_FLAGS          "-Wl,--enable-new-dtags" ) # --enable-new-dtags sets RUNPATH to the same value as RPATH
-endif (NOT CYGWIN)
-
-# embed RPATH and RUNPATH to the binaries that assumes that everything is installed in the same directory
-#
-# Description:
-#   RPATH is used to locate dynamically load shared libraries/objects (DLLs) for the non-standard OS
-#   locations without need of relinking DLLs during installation. The algorithm is the following:
-#
-#   1. If RPATH is present in the EXE/DLL and RUNPATH is NOT present, search through it.
-#   2. If LD_LIBRARY_PATH env variable is present, search through it
-#   3. If RUNPATH is present in the EXE/DLL, search through it
-#   4. Search through locations, configured by system admin and cached in /etc/ld.so.cache
-#   5. Search through /lib and /usr/lib
-#
-#   RUNPATH influences only the immediate dependencies, while RPATH influences the whole subtree of dependencies
-#   RPATH is concidered deprecated in favor of RUNPATH, but RUNPATH does not supported by some Linux systems.
-#   If RUNPATH is not supported, system loader may report error - remove "-Wl,--enable-new-dtags" above to
-#   disable RUNPATH generation.
-#
-#   If RPATH or RUNPATH contains string $ORIGIN it is substituted by the full path to the containing EXE/DLL.
-#   Security issue 1: if EXE/DLL is marked as set-uid or set-gid, $ORIGIN is ignored.
-#   Security issue 2: if RPATH/RUNPATH references relative subdirs, intruder may fool it by using softlinks
-#
-SET(CMAKE_BUILD_WITH_INSTALL_RPATH    TRUE )   # build rpath as if already installed
-SET(CMAKE_INSTALL_RPATH               "$ORIGIN::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::" ) # the rpath to use - search through installation dir only
-SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)   # do not use static link paths as rpath
-
-# C switches
-set( CMAKE_C_FLAGS                          "${CMAKE_C_FLAGS}                         ${ADD_C_FLAGS}")
-set( CMAKE_C_FLAGS_DEBUG                    "${CMAKE_C_FLAGS_DEBUG}                   ${ADD_C_FLAGS_DEBUG}")
-set( CMAKE_C_FLAGS_RELEASE                  "${CMAKE_C_FLAGS_RELEASE}                 ${ADD_C_FLAGS_RELEASE}")
-set( CMAKE_C_FLAGS_RELWITHDEBINFO           "${CMAKE_C_FLAGS_RELWITHDEBINFO}          ${ADD_C_FLAGS_RELWITHDEBINFO}")
-
-# C++ switches
-set( CMAKE_CXX_FLAGS                        "${CMAKE_CXX_FLAGS}                       ${ADD_CXX_FLAGS}")
-set( CMAKE_CXX_FLAGS_DEBUG                  "${CMAKE_CXX_FLAGS_DEBUG}                 ${ADD_C_FLAGS_DEBUG}")
-set( CMAKE_CXX_FLAGS_RELEASE                "${CMAKE_CXX_FLAGS_RELEASE}               ${ADD_C_FLAGS_RELEASE}")
-set( CMAKE_CXX_FLAGS_RELWITHDEBINFO         "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}        ${ADD_C_FLAGS_RELWITHDEBINFO}")
-
-# Linker switches - EXE
-set( CMAKE_EXE_LINKER_FLAGS                 "${INIT_LINKER_FLAGS}")
-
-# Linker switches - DLL
-set( CMAKE_SHARED_LINKER_FLAGS              "${INIT_LINKER_FLAGS}                     ${ADD_CMAKE_EXE_LINKER_FLAGS}")
-
-message(STATUS "\n\n** ** ** COMPILER Definitions ** ** **")
-message(STATUS "CMAKE_C_COMPILER        = ${CMAKE_C_COMPILER}")
-message(STATUS "CMAKE_C_FLAGS           = ${CMAKE_C_FLAGS}")
-message(STATUS "")
-message(STATUS "CMAKE_CXX_COMPILER      = ${CMAKE_CXX_COMPILER}")
-message(STATUS "CMAKE_CXX_FLAGS         = ${CMAKE_CXX_FLAGS}")
-message(STATUS "")
-message(STATUS "CMAKE_EXE_LINKER_FLAGS  = ${CMAKE_EXE_LINKER_FLAGS}")
-message(STATUS "")
-message(STATUS "CMAKE_BUILD_TOOL        = ${CMAKE_BUILD_TOOL}")
-
+#
+# Copyright (c) 2011-2016 The Khronos Group Inc.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and/or associated documentation files (the
+# "Materials"), to deal in the Materials without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Materials, and to
+# permit persons to whom the Materials are furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Materials.
+#
+# MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
+# KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS
+# SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT
+#    https://www.khronos.org/registry/
+#
+# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
+#
+
+
+# Options common to all projects.
+message(STATUS "** ** ** Enable Languages ** ** **")
+
+enable_language( C )
+enable_language( CXX )
+
+if (CYGWIN)
+    add_definitions( -DCYGWIN )
+    set( OPENVX_BUILDING_EXPORT_DEF -DVX_API_ENTRY=__attribute__\(\(dllexport\)\) )
+endif (CYGWIN)
+
+set(BUILD_X64 "" CACHE STRING "whether to perform 64-bit build: ON or OFF overrides default detection")
+
+# Unless user specifies BUILD_X64 explicitly, assume native target
+if (BUILD_X64 STREQUAL "")
+  set(BUILD_X64 "TRUE")
+ else()
+  set(BUILD_X64 "FALSE")
+endif()
+
+if(BUILD_X64)
+  set(ARCH_BIT -m64 )
+  message("Building 64-bit ...")
+else()
+  message("Building 32-bit ...")
+  if (TARGET_CPU STREQUAL "Atom")
+    # architecture will be according to ATOM
+    set(ARCH_BIT -m32 )
+  else ()
+    # need to force a more modern architecture than the degault m32 (i386).
+    set(ARCH_BIT "-m32 -march=core2" )
+  endif (TARGET_CPU STREQUAL "Atom")
+endif()
+
+# Compiler switches that CANNOT be modified during makefile generation
+if (NOT CYGWIN)
+    set (ADD_COMMON_C_FLAGS         "${ARCH_BIT} -fPIC" )
+endif (NOT CYGWIN)
+
+set (ADD_C_FLAGS                "${ADD_COMMON_C_FLAGS} -std=gnu99" )
+set (ADD_C_FLAGS_DEBUG          "-O0 -ggdb3 -D _DEBUG" )
+set (ADD_C_FLAGS_RELEASE        "-O2 -ggdb2 -U _DEBUG")
+set (ADD_C_FLAGS_RELWITHDEBINFO "-O2 -ggdb3 -U _DEBUG")
+
+set (ADD_CXX_FLAGS              "${ADD_COMMON_C_FLAGS}" )
+
+# Linker switches
+
+if (NOT CYGWIN)
+    set (INIT_LINKER_FLAGS          "-Wl,--enable-new-dtags" ) # --enable-new-dtags sets RUNPATH to the same value as RPATH
+endif (NOT CYGWIN)
+
+# embed RPATH and RUNPATH to the binaries that assumes that everything is installed in the same directory
+#
+# Description:
+#   RPATH is used to locate dynamically load shared libraries/objects (DLLs) for the non-standard OS
+#   locations without need of relinking DLLs during installation. The algorithm is the following:
+#
+#   1. If RPATH is present in the EXE/DLL and RUNPATH is NOT present, search through it.
+#   2. If LD_LIBRARY_PATH env variable is present, search through it
+#   3. If RUNPATH is present in the EXE/DLL, search through it
+#   4. Search through locations, configured by system admin and cached in /etc/ld.so.cache
+#   5. Search through /lib and /usr/lib
+#
+#   RUNPATH influences only the immediate dependencies, while RPATH influences the whole subtree of dependencies
+#   RPATH is concidered deprecated in favor of RUNPATH, but RUNPATH does not supported by some Linux systems.
+#   If RUNPATH is not supported, system loader may report error - remove "-Wl,--enable-new-dtags" above to
+#   disable RUNPATH generation.
+#
+#   If RPATH or RUNPATH contains string $ORIGIN it is substituted by the full path to the containing EXE/DLL.
+#   Security issue 1: if EXE/DLL is marked as set-uid or set-gid, $ORIGIN is ignored.
+#   Security issue 2: if RPATH/RUNPATH references relative subdirs, intruder may fool it by using softlinks
+#
+SET(CMAKE_BUILD_WITH_INSTALL_RPATH    TRUE )   # build rpath as if already installed
+SET(CMAKE_INSTALL_RPATH               "$ORIGIN::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::" ) # the rpath to use - search through installation dir only
+SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)   # do not use static link paths as rpath
+
+# C switches
+set( CMAKE_C_FLAGS                          "${CMAKE_C_FLAGS}                         ${ADD_C_FLAGS}")
+set( CMAKE_C_FLAGS_DEBUG                    "${CMAKE_C_FLAGS_DEBUG}                   ${ADD_C_FLAGS_DEBUG}")
+set( CMAKE_C_FLAGS_RELEASE                  "${CMAKE_C_FLAGS_RELEASE}                 ${ADD_C_FLAGS_RELEASE}")
+set( CMAKE_C_FLAGS_RELWITHDEBINFO           "${CMAKE_C_FLAGS_RELWITHDEBINFO}          ${ADD_C_FLAGS_RELWITHDEBINFO}")
+
+# C++ switches
+set( CMAKE_CXX_FLAGS                        "${CMAKE_CXX_FLAGS}                       ${ADD_CXX_FLAGS}")
+set( CMAKE_CXX_FLAGS_DEBUG                  "${CMAKE_CXX_FLAGS_DEBUG}                 ${ADD_C_FLAGS_DEBUG}")
+set( CMAKE_CXX_FLAGS_RELEASE                "${CMAKE_CXX_FLAGS_RELEASE}               ${ADD_C_FLAGS_RELEASE}")
+set( CMAKE_CXX_FLAGS_RELWITHDEBINFO         "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}        ${ADD_C_FLAGS_RELWITHDEBINFO}")
+
+# Linker switches - EXE
+set( CMAKE_EXE_LINKER_FLAGS                 "${INIT_LINKER_FLAGS}")
+
+# Linker switches - DLL
+set( CMAKE_SHARED_LINKER_FLAGS              "${INIT_LINKER_FLAGS}                     ${ADD_CMAKE_EXE_LINKER_FLAGS}")
+
+message(STATUS "\n\n** ** ** COMPILER Definitions ** ** **")
+message(STATUS "CMAKE_C_COMPILER        = ${CMAKE_C_COMPILER}")
+message(STATUS "CMAKE_C_FLAGS           = ${CMAKE_C_FLAGS}")
+message(STATUS "")
+message(STATUS "CMAKE_CXX_COMPILER      = ${CMAKE_CXX_COMPILER}")
+message(STATUS "CMAKE_CXX_FLAGS         = ${CMAKE_CXX_FLAGS}")
+message(STATUS "")
+message(STATUS "CMAKE_EXE_LINKER_FLAGS  = ${CMAKE_EXE_LINKER_FLAGS}")
+message(STATUS "")
+message(STATUS "CMAKE_BUILD_TOOL        = ${CMAKE_BUILD_TOOL}")
diff --git a/examples/vx_tiling_ext.c b/examples/vx_tiling_ext.c
index 0e06383..b688d98 100644
--- a/examples/vx_tiling_ext.c
+++ b/examples/vx_tiling_ext.c
@@ -363,3 +363,28 @@ VX_API_ENTRY vx_status VX_API_CALL vxPublishKernels(vx_context context)
     /*! [publish_function] */
     return status;
 }
+
+VX_API_ENTRY vx_status VX_API_CALL vxUnpublishKernels(vx_context context)
+{
+    vx_status status = VX_SUCCESS;
+    vx_uint32 k = 0;
+    vx_kernel kernel, kernelcpy;
+
+    for (k = 0; k < dimof(tiling_kernels); k++){
+        kernel = vxGetKernelByName(context, tiling_kernels[k].name);
+        kernelcpy = kernel;
+    }
+
+    if (kernel)
+    {
+        status = vxReleaseKernel(&kernelcpy);
+        /*
+        if (status == VX_SUCCESS)
+        {
+            status = vxRemoveKernel(kernel);
+            printf("%s remove status %d\n", __func__, status);
+        }
+        */
+    }
+    return status;
+}
diff --git a/examples/vx_tiling_main.c b/examples/vx_tiling_main.c
index b12800c..bb5c20b 100644
--- a/examples/vx_tiling_main.c
+++ b/examples/vx_tiling_main.c
@@ -77,12 +77,12 @@ vx_node vxTilingBoxNode(vx_graph graph, vx_image in, vx_image out, vx_uint32 wid
     if (node && (width&1) && (height&1))
     {
         vx_neighborhood_size_t nbhd;
-        vxQueryNode(node, VX_NODE_INPUT_NEIGHBORHOOD, &nbhd, sizeof(nbhd));
+        vxQueryNode(node, VX_NODE_ATTRIBUTE_INPUT_NEIGHBORHOOD, &nbhd, sizeof(nbhd));
         nbhd.left = 0 - ((width - 1)/2);
         nbhd.right = ((width - 1)/2);
         nbhd.top = 0 - ((height - 1)/2);
         nbhd.bottom = ((height - 1)/2);
-        vxSetNodeAttribute(node, VX_NODE_INPUT_NEIGHBORHOOD, &nbhd, sizeof(nbhd));
+        vxSetNodeAttribute(node, VX_NODE_ATTRIBUTE_INPUT_NEIGHBORHOOD, &nbhd, sizeof(nbhd));
     }
     return node;
 }
diff --git a/include/VX/vx_api.h b/include/VX/vx_api.h
index 88316f9..629134c 100644
--- a/include/VX/vx_api.h
+++ b/include/VX/vx_api.h
@@ -784,7 +784,7 @@ VX_API_ENTRY vx_kernel VX_API_CALL vxGetKernelByName(vx_context context, const v
  * \pre <tt>\ref vxLoadKernels</tt> if the kernel is not provided by the
  * OpenVX implementation.
  */
-VX_API_ENTRY vx_kernel VX_API_CALL vxGetKernelByEnum(vx_context context, vx_enum kernel);
+VX_API_ENTRY vx_kernel VX_API_CALL vxGetKernelByEnum(vx_context context, vx_enum kernel_);
 
 /*! \brief This allows the client to query the kernel to get information about
  * the number of parameters, enum values, etc.
@@ -799,7 +799,7 @@ VX_API_ENTRY vx_kernel VX_API_CALL vxGetKernelByEnum(vx_context context, vx_enum
  * \retval VX_ERROR_NOT_SUPPORTED If the attribute value is not supported in this implementation.
  * \ingroup group_kernel
  */
-VX_API_ENTRY vx_status VX_API_CALL vxQueryKernel(vx_kernel kernel, vx_enum attribute, void *ptr, vx_size size);
+VX_API_ENTRY vx_status VX_API_CALL vxQueryKernel(vx_kernel kernel_, vx_enum attribute, void *ptr, vx_size size);
 
 /*! \brief Release the reference to the kernel.
  * The object may not be garbage collected until its total reference count is zero.
@@ -810,7 +810,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryKernel(vx_kernel kernel, vx_enum attri
  * \retval VX_ERROR_INVALID_REFERENCE If kernel is not a <tt>\ref vx_kernel</tt>.
  * \ingroup group_kernel
  */
-VX_API_ENTRY vx_status VX_API_CALL vxReleaseKernel(vx_kernel *kernel);
+VX_API_ENTRY vx_status VX_API_CALL vxReleaseKernel(vx_kernel *kernel_);
 
 /*! \brief Allows users to add custom kernels to the known kernel
  * database in OpenVX at run-time. This would primarily be used by the module function
@@ -849,7 +849,7 @@ VX_API_ENTRY vx_kernel VX_API_CALL vxAddUserKernel(vx_context context,
  * \pre <tt>\ref vxAddUserKernel</tt> and <tt>\ref vxAddParameterToKernel</tt>
  * \ingroup group_user_kernels
  */
-VX_API_ENTRY vx_status VX_API_CALL vxFinalizeKernel(vx_kernel kernel);
+VX_API_ENTRY vx_status VX_API_CALL vxFinalizeKernel(vx_kernel kernel_);
 
 /*! \brief Allows users to set the signatures of the custom kernel.
  * \param [in] kernel The reference to the kernel added with <tt>\ref vxAddUserKernel</tt>.
@@ -864,7 +864,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxFinalizeKernel(vx_kernel kernel);
  * \pre <tt>\ref vxAddUserKernel</tt>
  * \ingroup group_user_kernels
  */
-VX_API_ENTRY vx_status VX_API_CALL vxAddParameterToKernel(vx_kernel kernel, vx_uint32 index, vx_enum dir, vx_enum data_type, vx_enum state);
+VX_API_ENTRY vx_status VX_API_CALL vxAddParameterToKernel(vx_kernel kernel_, vx_uint32 index, vx_enum dir, vx_enum data_type, vx_enum state);
 
 /*! \brief Removes a <tt>\ref vx_kernel</tt> from the <tt>\ref vx_context</tt> 
  * and releases it. 
@@ -882,7 +882,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxAddParameterToKernel(vx_kernel kernel, vx_u
  * has nodes that is using this kernel.
  * \ingroup group_user_kernels
  */
-VX_API_ENTRY vx_status VX_API_CALL vxRemoveKernel(vx_kernel kernel);
+VX_API_ENTRY vx_status VX_API_CALL vxRemoveKernel(vx_kernel kernel_);
 
 /*! \brief Sets kernel attributes.
  * \param [in] kernel The reference to the kernel.
@@ -894,7 +894,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxRemoveKernel(vx_kernel kernel);
  * \return A <tt>\ref vx_status_e</tt> enumeration.
  * \ingroup group_user_kernels
  */
-VX_API_ENTRY vx_status VX_API_CALL vxSetKernelAttribute(vx_kernel kernel, vx_enum attribute, const void *ptr, vx_size size);
+VX_API_ENTRY vx_status VX_API_CALL vxSetKernelAttribute(vx_kernel kernel_, vx_enum attribute, const void *ptr, vx_size size);
 
 /*! \brief Retrieves a <tt>\ref vx_parameter</tt> from a <tt>\ref vx_kernel</tt>.
  * \param [in] kernel The reference to the kernel.
@@ -905,7 +905,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxSetKernelAttribute(vx_kernel kernel, vx_enu
  * \retval * The parameter reference.
  * \ingroup group_parameter
  */
-VX_API_ENTRY vx_parameter VX_API_CALL vxGetKernelParameterByIndex(vx_kernel kernel, vx_uint32 index);
+VX_API_ENTRY vx_parameter VX_API_CALL vxGetKernelParameterByIndex(vx_kernel kernel_, vx_uint32 index);
 
 /*==============================================================================
  GRAPH
@@ -1087,7 +1087,7 @@ VX_API_ENTRY vx_bool VX_API_CALL vxIsGraphVerified(vx_graph graph);
  * \ingroup group_adv_node
  * \post Call <tt>\ref vxSetParameterByIndex</tt> for as many parameters as needed to be set.
  */
-VX_API_ENTRY vx_node VX_API_CALL vxCreateGenericNode(vx_graph graph, vx_kernel kernel);
+VX_API_ENTRY vx_node VX_API_CALL vxCreateGenericNode(vx_graph graph, vx_kernel kernel_);
 
 /*! \brief Allows a user to query information out of a node.
  * \param [in] node The reference to the node to query.
diff --git a/include/VX/vx_khr_opencl.h b/include/VX/vx_khr_opencl.h
index a087b64..a684cc2 100644
--- a/include/VX/vx_khr_opencl.h
+++ b/include/VX/vx_khr_opencl.h
@@ -179,8 +179,10 @@ VX_API_ENTRY vx_kernel VX_API_CALL vxAddOpenCLAsBinaryKernel(vx_context context,
  * \param stride The stride in bytes between two adjacent elements.
  * \ingroup group_cl_array
  */
-#define vxArrayItem(type, ptr, index, stride) \
-    (*(type *)(&((uchar *)ptr)[index*stride]))
+
+// defined in vx_api.h
+//#define vxArrayItem(type, ptr, index, stride) \
+//    (*(type *)(&((uchar *)ptr)[index*stride]))
 
 /*! \brief Allows access to a matrix element \f$ M_{ij} \f$ where i is the column and j is the row.
  * \param type The OpenCL single element type of the matrix.
diff --git a/include/VX/vx_khr_tiling.h b/include/VX/vx_khr_tiling.h
index 6d55acd..28342a4 100644
--- a/include/VX/vx_khr_tiling.h
+++ b/include/VX/vx_khr_tiling.h
@@ -44,6 +44,7 @@
 #endif
 
 #include <VX/vx.h>
+#include <VX/vx_compatibility.h>
 
 /*! \def VX_RESTRICT
  * \brief A platform wrapper for the restrict keyword.
@@ -243,18 +244,18 @@ typedef struct _vx_tile_t {
  */
 enum vx_kernel_attribute_tiling_e {
     /*! \brief This allows a tiling mode kernel to set its input neighborhood. */
-    VX_KERNEL_INPUT_NEIGHBORHOOD      = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x7,
-    /*! \brief This allows a tiling mode kernel to set its output tile block size. */
-    VX_KERNEL_OUTPUT_TILE_BLOCK_SIZE  = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x8,
-    /*! \brief This allows the author to set the border mode on the tiling kernel. */
-    VX_KERNEL_BORDER                  = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x9,
+    VX_KERNEL_ATTRIBUTE_INPUT_NEIGHBORHOOD      = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x7,
+    /*! \briefATTRIBUTE_ This allows a tiling mode kernel to set its output tile block size. */
+    VX_KERNEL_ATTRIBUTE_OUTPUT_TILE_BLOCK_SIZE  = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x8,
+    /*! \briefATTRIBUTE_ This allows the author to set the border mode on the tiling kernel. */
+    VX_KERNEL_ATTRIBUTE_BORDER                  = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x9,
     /*! \brief This determines the per tile memory allocation. */
-    VX_KERNEL_TILE_MEMORY_SIZE        = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xA,
+    VX_KERNEL_ATTRIBUTE_TILE_MEMORY_SIZE        = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xA,
 #if defined(OPENVX_TILING_1_1)
     /*! \brief This allows a tiling mode kernel to set its input tile block size. */
-    VX_KERNEL_INPUT_TILE_BLOCK_SIZE   = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xB,
+    VX_KERNEL_ATTRIBUTE_INPUT_TILE_BLOCK_SIZE   = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xB,
     /*! \brief This allows a tiling mode kernel to set its output neighborhood. */
-    VX_KERNEL_OUTPUT_NEIGHBORHOOD     = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xC,
+    VX_KERNEL_ATTRIBUTE_OUTPUT_NEIGHBORHOOD     = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xC,
 #endif
 };
 
@@ -264,16 +265,16 @@ enum vx_kernel_attribute_tiling_e {
  */
 enum vx_node_attribute_tiling_e {
     /*! \brief This allows a tiling mode node to get its input neighborhood. */
-    VX_NODE_INPUT_NEIGHBORHOOD      = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x7,
+    VX_NODE_ATTRIBUTE_INPUT_NEIGHBORHOOD      = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xA,
     /*! \brief This allows a tiling mode node to get its output tile block size. */
-    VX_NODE_OUTPUT_TILE_BLOCK_SIZE  = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x8,
+    VX_NODE_ATTRIBUTE_OUTPUT_TILE_BLOCK_SIZE  = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xB,
     /*! \brief This is the size of the tile local memory area. */
-    VX_NODE_TILE_MEMORY_SIZE        = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xA,
+    VX_NODE_ATTRIBUTE_TILE_MEMORY_SIZE        = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xC,
 #if defined(OPENVX_TILING_1_1)
     /*! \brief This allows a tiling mode node to get its input tile block size. */
-    VX_NODE_INPUT_TILE_BLOCK_SIZE   = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xB,
+    VX_NODE_ATTRIBUTE_INPUT_TILE_BLOCK_SIZE   = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xE,
     /*! \brief This allows a tiling mode node to get its output neighborhood. */
-    VX_NODE_OUTPUT_NEIGHBORHOOD     = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xC,
+    VX_NODE_ATTRIBUTE_OUTPUT_NEIGHBORHOOD     = VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xF,
 #endif
 };
 
@@ -286,7 +287,7 @@ enum vx_border_tiling_e {
      * is set, it can not be overriden by a call to the \ref vxSetNodeAttribute
      * with \ref VX_NODE_BORDER.
      */
-    VX_BORDER_SELF = VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_BORDER) + 0x3,
+    VX_BORDER_MODE_SELF = VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_BORDER) + 0x3,
 };
 
 /*! \typedef vx_tiling_kernel_f
diff --git a/include/VX/vx_types.h b/include/VX/vx_types.h
index 80faac0..1c07080 100644
--- a/include/VX/vx_types.h
+++ b/include/VX/vx_types.h
@@ -29,13 +29,15 @@
 #ifndef _OPENVX_TYPES_H_
 #define _OPENVX_TYPES_H_
 
+#pragma OPENCL EXTENSION cl_khr_fp64 : enable
+
 /*!
  * \file vx_types.h
  * \brief The type definitions required by OpenVX Library.
  */
 
 #include <stdint.h>
-#include <stddef.h>
+//#include <stddef.h>
 #include <string.h>
 
 /*!
diff --git a/sample/framework/vx_context.c b/sample/framework/vx_context.c
index 6abac61..87bf3a9 100644
--- a/sample/framework/vx_context.c
+++ b/sample/framework/vx_context.c
@@ -889,6 +889,8 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryContext(vx_context context, vx_enum at
                     status = VX_ERROR_INVALID_PARAMETERS;
                 }
                 break;
+
+#if !defined(EXPERIMENTAL_USE_TARGET)
             case VX_CONTEXT_IMMEDIATE_BORDER_POLICY:
                 if (VX_CHECK_PARAM(ptr, size, vx_enum, 0x3))
                 {
@@ -899,6 +901,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryContext(vx_context context, vx_enum at
                     status = VX_ERROR_INVALID_PARAMETERS;
                 }
                 break;
+#endif
             case VX_CONTEXT_UNIQUE_KERNELS:
                 if (VX_CHECK_PARAM(ptr, size, vx_uint32, 0x3))
                 {
diff --git a/sample/framework/vx_kernel.c b/sample/framework/vx_kernel.c
index e30b3a6..d37998f 100644
--- a/sample/framework/vx_kernel.c
+++ b/sample/framework/vx_kernel.c
@@ -865,7 +865,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryKernel(vx_kernel kern, vx_enum attribu
                 break;
 #endif
 #ifdef OPENVX_KHR_TILING
-            case VX_KERNEL_INPUT_NEIGHBORHOOD:
+            case VX_KERNEL_ATTRIBUTE_INPUT_NEIGHBORHOOD:
                 if (VX_CHECK_PARAM(ptr, size, vx_neighborhood_size_t, 0x3))
                 {
                     memcpy(ptr, &kernel->attributes.nhbdinfo, size);
@@ -876,7 +876,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryKernel(vx_kernel kern, vx_enum attribu
                 }
                 break;
 
-            case VX_KERNEL_OUTPUT_TILE_BLOCK_SIZE:
+            case VX_KERNEL_ATTRIBUTE_OUTPUT_TILE_BLOCK_SIZE:
                 if (VX_CHECK_PARAM(ptr, size, vx_tile_block_size_t, 0x3))
                 {
                     memcpy(ptr, &kernel->attributes.blockinfo, size);
@@ -1093,7 +1093,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxSetKernelAttribute(vx_kernel k, vx_enum att
             break;
 #endif
 #ifdef OPENVX_KHR_TILING
-        case VX_KERNEL_INPUT_NEIGHBORHOOD:
+        case VX_KERNEL_ATTRIBUTE_INPUT_NEIGHBORHOOD:
             if (VX_CHECK_PARAM(ptr, size, vx_neighborhood_size_t, 0x3))
             {
                 memcpy(&kernel->attributes.nhbdinfo, ptr, size);
@@ -1103,7 +1103,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxSetKernelAttribute(vx_kernel k, vx_enum att
                 status = VX_ERROR_INVALID_PARAMETERS;
             }
             break;
-        case VX_KERNEL_OUTPUT_TILE_BLOCK_SIZE:
+        case VX_KERNEL_ATTRIBUTE_OUTPUT_TILE_BLOCK_SIZE:
             if (VX_CHECK_PARAM(ptr, size, vx_tile_block_size_t, 0x3))
             {
                 memcpy(&kernel->attributes.blockinfo, ptr, size);
@@ -1113,7 +1113,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxSetKernelAttribute(vx_kernel k, vx_enum att
                 status = VX_ERROR_INVALID_PARAMETERS;
             }
             break;
-        case VX_KERNEL_BORDER:
+        case VX_KERNEL_ATTRIBUTE_BORDER:
             if (VX_CHECK_PARAM(ptr, size, vx_border_t, 0x3))
             {
                 vx_border_t *border = (vx_border_t *)ptr;
diff --git a/sample/framework/vx_node.c b/sample/framework/vx_node.c
index 6ae29c6..38951a6 100644
--- a/sample/framework/vx_node.c
+++ b/sample/framework/vx_node.c
@@ -198,7 +198,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryNode(vx_node n, vx_enum attribute, voi
                 }
                 break;
 #ifdef OPENVX_KHR_TILING
-            case VX_NODE_INPUT_NEIGHBORHOOD:
+            case VX_NODE_ATTRIBUTE_INPUT_NEIGHBORHOOD:
                 if (VX_CHECK_PARAM(ptr, size, vx_neighborhood_size_t, 0x3))
                 {
                     memcpy(ptr, &node->kernel->attributes.nhbdinfo, size);
@@ -208,7 +208,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryNode(vx_node n, vx_enum attribute, voi
                     status = VX_ERROR_INVALID_PARAMETERS;
                 }
                 break;
-            case VX_NODE_OUTPUT_TILE_BLOCK_SIZE:
+            case VX_NODE_ATTRIBUTE_OUTPUT_TILE_BLOCK_SIZE:
                 if (VX_CHECK_PARAM(ptr, size, vx_tile_block_size_t, 0x3))
                 {
                     memcpy(ptr, &node->kernel->attributes.blockinfo, size);
@@ -218,7 +218,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryNode(vx_node n, vx_enum attribute, voi
                     status = VX_ERROR_INVALID_PARAMETERS;
                 }
                 break;
-            case VX_NODE_TILE_MEMORY_SIZE:
+            case VX_NODE_ATTRIBUTE_TILE_MEMORY_SIZE:
                 if (VX_CHECK_PARAM(ptr, size, vx_size, 0x3))
                 {
                     *(vx_size *)ptr = node->attributes.tileDataSize;
@@ -228,7 +228,7 @@ VX_API_ENTRY vx_status VX_API_CALL vxQueryNode(vx_node n, vx_enum attribute, voi
                     status = VX_ERROR_INVALID_PARAMETERS;
                 }
                 break;
-            case VX_NODE_TILE_MEMORY_PTR:
+            case VX_NODE_ATTRIBUTE_TILE_MEMORY_PTR:
                 if (VX_CHECK_PARAM(ptr, size, vx_ptr_t, 0x3))
                 {
                     *(vx_ptr_t *)ptr = node->attributes.tileDataPtr;
diff --git a/sample/targets/c_model/vx_interface.c b/sample/targets/c_model/vx_interface.c
index 23101c9..e31bd77 100644
--- a/sample/targets/c_model/vx_interface.c
+++ b/sample/targets/c_model/vx_interface.c
@@ -424,8 +424,8 @@ vx_status VX_CALLBACK vxTilingKernel(vx_node node, vx_reference parameters[], vx
         //printf("Tiling Kernel Parameter[%u] dir:%d type:0%08x\n", p, dirs[p], types[p]);
         if (types[p] == VX_TYPE_IMAGE)
         {
-            vxQueryNode(node, VX_NODE_OUTPUT_TILE_BLOCK_SIZE, &tiles[p].tile_block, sizeof(vx_tile_block_size_t));
-            vxQueryNode(node, VX_NODE_INPUT_NEIGHBORHOOD, &tiles[p].neighborhood, sizeof(vx_neighborhood_size_t));
+            vxQueryNode(node, VX_NODE_ATTRIBUTE_OUTPUT_TILE_BLOCK_SIZE, &tiles[p].tile_block, sizeof(vx_tile_block_size_t));
+            vxQueryNode(node, VX_NODE_ATTRIBUTE_INPUT_NEIGHBORHOOD, &tiles[p].neighborhood, sizeof(vx_neighborhood_size_t));
             ownPrintImage((vx_image_t *)parameters[p]);
             images[p] = (vx_image)parameters[p];
             vxQueryImage(images[p], VX_IMAGE_WIDTH, &tiles[p].image.width, sizeof(vx_uint32));
@@ -454,8 +454,8 @@ vx_status VX_CALLBACK vxTilingKernel(vx_node node, vx_reference parameters[], vx
     status |= vxQueryImage(images[index], VX_IMAGE_WIDTH, &width, sizeof(width));
     status |= vxQueryImage(images[index], VX_IMAGE_HEIGHT, &height, sizeof(height));
     status |= vxQueryNode(node, VX_NODE_BORDER, &borders, sizeof(borders));
-    status |= vxQueryNode(node, VX_NODE_INPUT_NEIGHBORHOOD, &nbhd, sizeof(nbhd));
-    status |= vxQueryNode(node, VX_NODE_TILE_MEMORY_SIZE, &size, sizeof(size));
+    status |= vxQueryNode(node, VX_NODE_ATTRIBUTE_INPUT_NEIGHBORHOOD, &nbhd, sizeof(nbhd));
+    status |= vxQueryNode(node, VX_NODE_ATTRIBUTE_TILE_MEMORY_SIZE, &size, sizeof(size));
 
 #if 0
     tile_size_y = (height - (nbhd.y[1] + abs(nbhd.y[0]))) / block_multiple;
@@ -498,8 +498,8 @@ vx_status VX_CALLBACK vxTilingKernel(vx_node node, vx_reference parameters[], vx
             }
             if (status == VX_SUCCESS)
             {
-                //printf("Calling Tile{%u,%u} with %s\n", tx, ty, ((vx_node_t *)node)->kernel->name);
-                vxQueryNode(node, VX_NODE_TILE_MEMORY_PTR, &tile_memory, sizeof(void *));
+                printf("Calling Tile{%u,%u} with %s\n", tx, ty, ((vx_node_t *)node)->kernel->name);
+                vxQueryNode(node, VX_NODE_ATTRIBUTE_TILE_MEMORY_PTR, &tile_memory, sizeof(void *));
                 ((vx_node_t *)node)->kernel->tiling_function(params, tile_memory, size);
             }
             else
diff --git a/sample/targets/opencl/vx_interface.c b/sample/targets/opencl/vx_interface.c
index 70bfde9..20cbdf6 100644
--- a/sample/targets/opencl/vx_interface.c
+++ b/sample/targets/opencl/vx_interface.c
@@ -43,13 +43,13 @@
 static const vx_char name[VX_MAX_TARGET_NAME] = "pc.opencl";
 
 /*! \brief Prototype for assigning to kernel */
-static vx_status vxclCallOpenCLKernel(vx_node node, const vx_reference *parameters, vx_uint32 num);
+//static vx_status vxclCallOpenCLKernel(vx_node node, const vx_reference *parameters, vx_uint32 num);
+static vx_status vxclCallOpenCLKernel(vx_node node, vx_reference parameters[], vx_uint32 num);
 
 static vx_cl_kernel_description_t *cl_kernels[] =
 {
     &box3x3_clkernel,
     &gaussian3x3_clkernel,
-    &lut_clkernel,
     &and_kernel,
     &xor_kernel,
     &orr_kernel,
@@ -91,7 +91,7 @@ vx_status vxTargetInit(vx_target_t *target)
 #if defined(VX_INCLUDE_DIR)
     "-I "VX_INCLUDE_DIR" "
 #else
-    " "
+    "-I /usr/lib/llvm-3.4/lib/clang/3.4/include/"
 #endif
     );
 
@@ -110,7 +110,8 @@ vx_status vxTargetInit(vx_target_t *target)
     target->priority = VX_TARGET_PRIORITY_OPENCL;
 
     context->num_platforms = CL_MAX_PLATFORMS;
-    err = clGetPlatformIDs(CL_MAX_PLATFORMS, context->platforms, NULL);
+    cl_uint numPlatforms;
+    err = clGetPlatformIDs(CL_MAX_PLATFORMS, context->platforms, &numPlatforms);
     if (err != CL_SUCCESS)
         goto exit;
 
@@ -323,6 +324,7 @@ vx_status vxTargetInit(vx_target_t *target)
                                     cl_kernels[k]->description.name,
                                     cl_kernels[k]->description.parameters,
                                     cl_kernels[k]->description.numParams,
+                                    cl_kernels[k]->description.validate,
                                     cl_kernels[k]->description.input_validate,
                                     cl_kernels[k]->description.output_validate,
                                     cl_kernels[k]->description.initialize,
@@ -458,6 +460,7 @@ vx_kernel vxTargetAddKernel(vx_target_t *target,
                             vx_enum enumeration,
                             vx_kernel_f func_ptr,
                             vx_uint32 numParams,
+                            vx_kernel_validate_f validate,
                             vx_kernel_input_validate_f input,
                             vx_kernel_output_validate_f output,
                             vx_kernel_initialize_f initialize,
@@ -474,7 +477,7 @@ vx_kernel vxTargetAddKernel(vx_target_t *target,
                                kernel,
                                enumeration, func_ptr, name,
                                NULL, numParams,
-                               input, output, initialize, deinitialize);
+                               validate, input, output, initialize, deinitialize);
             VX_PRINT(VX_ZONE_KERNEL, "Reserving %s Kernel[%u] for %s\n", target->name, k, kernel->name);
             target->num_kernels++;
             break;
-- 
1.9.1

